<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Simple Xsec World</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xsec.7ever.cn/"/>
  <updated>2019-04-19T03:08:24.276Z</updated>
  <id>https://xsec.7ever.cn/</id>
  
  <author>
    <name>Xingyue</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang 生成随机数种子设置</title>
    <link href="https://xsec.7ever.cn/2019/04/19/golang-random-number/"/>
    <id>https://xsec.7ever.cn/2019/04/19/golang-random-number/</id>
    <published>2019-04-19T03:07:38.000Z</published>
    <updated>2019-04-19T03:08:24.276Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">"fmt"</span></span><br><span class="line">        <span class="string">"math/rand"</span></span><br><span class="line">        <span class="string">"time"</span></span><br><span class="line">       )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line">       <span class="keyword">for</span> i &lt; <span class="number">10</span> &#123;</span><br><span class="line">           i++</span><br><span class="line">               r := rand.New(rand.NewSource(time.Now().UnixNano()))</span><br><span class="line">               fmt.Println(r.Intn(<span class="number">100</span>))</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="开发" scheme="https://xsec.7ever.cn/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="golang" scheme="https://xsec.7ever.cn/tags/golang/"/>
    
      <category term="random" scheme="https://xsec.7ever.cn/tags/random/"/>
    
  </entry>
  
  <entry>
    <title>shell 命令审计</title>
    <link href="https://xsec.7ever.cn/2019/04/12/bash-audit/"/>
    <id>https://xsec.7ever.cn/2019/04/12/bash-audit/</id>
    <published>2019-04-12T00:52:41.000Z</published>
    <updated>2019-04-12T01:03:03.077Z</updated>
    
    <content type="html"><![CDATA[<h3 id="提前看"><a href="#提前看" class="headerlink" title="提前看:"></a>提前看:</h3><ul><li>.bash版本至少3.00或以上</li><li>接受审计的登录用户默认shell必须为bash</li></ul><p>配置方法，使用history ，添加固定的 PROMPT_COMMAND 命令格式, HISTTIMEFORMAT 设置history 的格式。<br>(如果其他的shell 也支持类似的变量，也可以用类似的方法解决)</p><h3 id="创建所需文件，及权限限制修改"><a href="#创建所需文件，及权限限制修改" class="headerlink" title="创建所需文件，及权限限制修改:"></a>创建所需文件，及权限限制修改:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/log/shell_audit</span><br><span class="line">touch /var/log/shell_audit/audit.log</span><br><span class="line">chown nobody:nobody /var/log/shell_audit/audit.log</span><br><span class="line">chmod 002 /var/log/shell_audit/audit.log</span><br><span class="line">chattr +a /var/log/shell_audit/audit.log</span><br></pre></td></tr></table></figure><h3 id="提前设置history-的相关设置"><a href="#提前设置history-的相关设置" class="headerlink" title="提前设置history 的相关设置:"></a>提前设置history 的相关设置:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 添加如下内容到 bashrc ,保证用户登录及生效</span><br><span class="line">HISTSIZE=2048</span><br><span class="line">HISTTIMEFORMAT="%Y/%m/%d %T   ";export HISTTIMEFORMAT</span><br><span class="line">export HISTORY_FILE=/var/log/shell_audit/audit.log</span><br><span class="line">export PROMPT_COMMAND='&#123; code=$?;thisHistID=`history 1|awk "&#123;print \\$1&#125;"`;lastCommand=`history 1| awk "&#123;\\$1=\"\" ;print&#125;"`;user=`id -un`;whoStr=(`who -u am i`);realUser=$&#123;whoStr[0]&#125;;logDay=$&#123;whoStr[2]&#125;;logTime=$&#123;whoStr[3]&#125;;pid=$&#123;whoStr[5]&#125;;ip=$&#123;whoStr[6]&#125;;if [ $&#123;thisHistID&#125;x != $&#123;lastHistID&#125;x ];then echo -E `date "+%Y/%m/%d %H:%M:%S"` $user\($realUser\)@$ip[PID:$pid][LOGIN:$logDay $logTime] --- [$PWD]$lastCommand [$code];lastHistID=$thisHistID;fi; &#125; &gt;&gt; $HISTORY_FILE'</span><br></pre></td></tr></table></figure><h3 id="添加相应的logrotate-防止日志过大"><a href="#添加相应的logrotate-防止日志过大" class="headerlink" title="添加相应的logrotate 防止日志过大:"></a>添加相应的logrotate 防止日志过大:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/logrotate.d/shell_audit</span><br><span class="line">/var/log/shell_audit/audit.log &#123;</span><br><span class="line">    weekly</span><br><span class="line">    missingok</span><br><span class="line">    dateext</span><br><span class="line">    rotate 100</span><br><span class="line">    sharedscripts</span><br><span class="line">    prerotate</span><br><span class="line">    /usr/bin/chattr -a /var/log/shell_audit/audit.log</span><br><span class="line">    endscript</span><br><span class="line">    sharedscripts</span><br><span class="line">    postrotate</span><br><span class="line">      /bin/touch /var/log/shell_audit/audit.log</span><br><span class="line">      /bin/chmod 002 /var/log/shell_audit/audit.log</span><br><span class="line">      /bin/chown nobody:nobody /var/log/shell_audit/audit.log</span><br><span class="line">      /usr/bin/chattr +a /var/log/shell_audit/audit.log</span><br><span class="line">    endscript</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="还可以配合rsyslog-传输到-集中的命令日志服务器-添加实时审计监控"><a href="#还可以配合rsyslog-传输到-集中的命令日志服务器-添加实时审计监控" class="headerlink" title="还可以配合rsyslog 传输到 集中的命令日志服务器,添加实时审计监控:"></a>还可以配合rsyslog 传输到 集中的命令日志服务器,添加实时审计监控:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ruleset(name="rule_rsyslog") &#123;</span><br><span class="line">    action(type="omfwd"</span><br><span class="line">        Protocol="udp"</span><br><span class="line">        Target="10.211.101.93"</span><br><span class="line">        Port="521")</span><br><span class="line">    stop</span><br><span class="line">&#125;</span><br><span class="line">input(</span><br><span class="line">    type="imfile"</span><br><span class="line">    File="/var/log/shell_audit/audit.log"</span><br><span class="line">    Facility="user"</span><br><span class="line">    Severity="notice"</span><br><span class="line">    Tag=""</span><br><span class="line">    PersistStateInterval="1"</span><br><span class="line">    Ruleset="rule_rsyslog"</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;提前看&quot;&gt;&lt;a href=&quot;#提前看&quot; class=&quot;headerlink&quot; title=&quot;提前看:&quot;&gt;&lt;/a&gt;提前看:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;.bash版本至少3.00或以上&lt;/li&gt;
&lt;li&gt;接受审计的登录用户默认shell必须为bash&lt;/li&gt;
&lt;/u
      
    
    </summary>
    
      <category term="审计" scheme="https://xsec.7ever.cn/categories/%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="shell" scheme="https://xsec.7ever.cn/tags/shell/"/>
    
      <category term="audit" scheme="https://xsec.7ever.cn/tags/audit/"/>
    
  </entry>
  
  <entry>
    <title>yaf 多模块配置</title>
    <link href="https://xsec.7ever.cn/2019/04/03/yaf-use-module/"/>
    <id>https://xsec.7ever.cn/2019/04/03/yaf-use-module/</id>
    <published>2019-04-03T06:48:48.000Z</published>
    <updated>2019-04-03T06:51:53.887Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置选项中，添加当前的模块"><a href="#配置选项中，添加当前的模块" class="headerlink" title="配置选项中，添加当前的模块:"></a>配置选项中，添加当前的模块:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">application.modules = 'Test,Index'</span><br></pre></td></tr></table></figure><h3 id="创建相应的目录"><a href="#创建相应的目录" class="headerlink" title="创建相应的目录:"></a>创建相应的目录:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@hids application]# tree modules/</span><br><span class="line">modules/</span><br><span class="line">└── Test</span><br><span class="line">    └── controllers</span><br><span class="line">        └── Hello.php</span><br><span class="line"></span><br><span class="line">2 directories, 1 file</span><br></pre></td></tr></table></figure><h3 id="访问地址"><a href="#访问地址" class="headerlink" title="访问地址:"></a>访问地址:</h3><p><a href="http://yourhost/prefix/test/hello/world" target="_blank" rel="noopener">http://yourhost/prefix/test/hello/world</a></p><p>注: 地址去掉prefix 以后超过三段，才会去识别模块</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;配置选项中，添加当前的模块&quot;&gt;&lt;a href=&quot;#配置选项中，添加当前的模块&quot; class=&quot;headerlink&quot; title=&quot;配置选项中，添加当前的模块:&quot;&gt;&lt;/a&gt;配置选项中，添加当前的模块:&lt;/h3&gt;&lt;figure class=&quot;highlight sh
      
    
    </summary>
    
      <category term="开发" scheme="https://xsec.7ever.cn/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="yaf" scheme="https://xsec.7ever.cn/tags/yaf/"/>
    
      <category term="php" scheme="https://xsec.7ever.cn/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>一个空的kafka 接收数据</title>
    <link href="https://xsec.7ever.cn/2019/03/29/kafka-receive/"/>
    <id>https://xsec.7ever.cn/2019/03/29/kafka-receive/</id>
    <published>2019-03-29T05:40:43.000Z</published>
    <updated>2019-03-29T05:45:13.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单代码实现如下"><a href="#简单代码实现如下" class="headerlink" title="简单代码实现如下:"></a>简单代码实现如下:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kafka <span class="keyword">import</span> KafkaConsumer</span><br><span class="line"></span><br><span class="line">consumer = KafkaConsumer(</span><br><span class="line">        <span class="string">'topic-name'</span>,</span><br><span class="line">        bootstrap_servers=<span class="string">'.....com:9092'</span>,</span><br><span class="line">        enable_auto_commit=<span class="keyword">False</span>,</span><br><span class="line">        api_version=(<span class="number">0</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> msg <span class="keyword">in</span> consumer:</span><br><span class="line">    print(msg)</span><br></pre></td></tr></table></figure><h2 id="运行监控"><a href="#运行监控" class="headerlink" title="运行监控:"></a>运行监控:</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./tools/kafka_2.10-0.9.0.1/bin/kafka-consumer-offset-checker.sh --group group_name --zookeeper=zookeeper_server --topic yourtopic</span></span><br></pre></td></tr></table></figure><h2 id="网卡流量监控"><a href="#网卡流量监控" class="headerlink" title="网卡流量监控:"></a>网卡流量监控:</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sar -n DEV 10</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简单代码实现如下&quot;&gt;&lt;a href=&quot;#简单代码实现如下&quot; class=&quot;headerlink&quot; title=&quot;简单代码实现如下:&quot;&gt;&lt;/a&gt;简单代码实现如下:&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="开发" scheme="https://xsec.7ever.cn/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="python" scheme="https://xsec.7ever.cn/tags/python/"/>
    
      <category term="kafka" scheme="https://xsec.7ever.cn/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>arts 记录 第0周</title>
    <link href="https://xsec.7ever.cn/2019/03/24/arts-2019-03-24/"/>
    <id>https://xsec.7ever.cn/2019/03/24/arts-2019-03-24/</id>
    <published>2019-03-24T05:04:40.000Z</published>
    <updated>2019-03-24T05:05:41.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="arts-2019-03-18-2019-03-24"><a href="#arts-2019-03-18-2019-03-24" class="headerlink" title="arts 2019-03-18 ~ 2019-03-24"></a>arts 2019-03-18 ~ 2019-03-24</h1><hr><h2 id="A-（Algorithm）"><a href="#A-（Algorithm）" class="headerlink" title="A （Algorithm）"></a>A （Algorithm）</h2><ul><li>题目如下: </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">给你两个非空的链式队列代表两个非负的整数.</span><br><span class="line">You are given two non-empty linked lists representing two non-negative integers. </span><br><span class="line">位数按照相反的顺序存在队列对应的位置，每一位只包含一位</span><br><span class="line">The digits are stored in reverse order and each of their nodes contain a single digit. </span><br><span class="line">把这两个数字加起来用链式队列的方式返回。</span><br><span class="line">Add the two numbers and return it as a linked list.</span><br><span class="line">你可以假设这两个数字不以0开头，除了0本身。</span><br><span class="line">You may assume the two numbers do not contain any leading zero, except the number 0 itself.</span><br><span class="line"></span><br><span class="line">测试用例：</span><br><span class="line">Example:</span><br><span class="line">输入:</span><br><span class="line">Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">输出:</span><br><span class="line">Output: 7 -&gt; 0 -&gt; 8</span><br><span class="line">解释:</span><br><span class="line">Explanation: 342 + 465 = 807.</span><br></pre></td></tr></table></figure><ul><li>解法如下</li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTwoNumbers</span><span class="params">(l1 *ListNode, l2 *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指针pos1,pos2,resultPos 分别表示队列l1,l2,结果的当前值</span></span><br><span class="line">    <span class="keyword">var</span> pos1 *ListNode = l1</span><br><span class="line">    <span class="keyword">var</span> pos2 *ListNode = l2</span><br><span class="line">    <span class="keyword">var</span> result,resultPos *ListNode</span><br><span class="line">    <span class="comment">// 用来表示进位</span></span><br><span class="line">    <span class="keyword">var</span> plusNumber <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表示循环条件 l1 不为空，或者 l2 不为空</span></span><br><span class="line">    <span class="keyword">for</span> ; (pos1 != <span class="literal">nil</span> || pos2 != <span class="literal">nil</span> ); &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化结果的第一个元素,并且处理当前循环计算的新元素</span></span><br><span class="line">        <span class="keyword">if</span> resultPos == <span class="literal">nil</span> &#123;</span><br><span class="line">            resultPos = <span class="built_in">new</span>(ListNode)</span><br><span class="line">            result = resultPos</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resultPos.Next = <span class="built_in">new</span>(ListNode)</span><br><span class="line">            resultPos = resultPos.Next</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//多重if条件判断，这段代码比较有意思</span></span><br><span class="line">        <span class="comment">//可以减掉频繁的if为空判断</span></span><br><span class="line">        <span class="keyword">switch</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> pos1 != <span class="literal">nil</span> &amp;&amp; pos2 == <span class="literal">nil</span>:</span><br><span class="line">                 resultPos.Val = pos1.Val + plusNumber</span><br><span class="line">                 pos1 = pos1.Next</span><br><span class="line">            <span class="keyword">case</span> pos1 == <span class="literal">nil</span> &amp;&amp; pos2 != <span class="literal">nil</span>:</span><br><span class="line">                resultPos.Val = pos2.Val + plusNumber</span><br><span class="line">                pos2 = pos2.Next</span><br><span class="line">            <span class="keyword">default</span> :</span><br><span class="line">                resultPos.Val = pos1.Val + pos2.Val + plusNumber</span><br><span class="line">                pos1 = pos1.Next</span><br><span class="line">                pos2 = pos2.Next</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重新设置进位，plusNumber 一定要归零</span></span><br><span class="line">        plusNumber = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> resultPos.Val &gt; <span class="number">9</span> &#123;</span><br><span class="line">            plusNumber = resultPos.Val / <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">        resultPos.Val = resultPos.Val % <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最后如果仍然存在进位，那么添加一个新的元素为1</span></span><br><span class="line">    <span class="keyword">if</span> plusNumber != <span class="number">0</span> &#123;</span><br><span class="line">        resultPos.Next = &amp;ListNode&#123;Val:<span class="number">1</span>,Next:<span class="literal">nil</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="R-Review"><a href="#R-Review" class="headerlink" title="R (Review)"></a>R (Review)</h2><p><a href="https://medium.com/@saginadir/why-i-love-golang-90085898b4f7" target="_blank" rel="noopener">Why I Love Golang</a></p><p>文章讲述了一个golang语言爱好者的简单总结。</p><ul><li>GOPATH 的环境变量:</li></ul><p>golang 强制把你对go语言的开发，放置到一个叫做GOPATH 的目录里，而不像其他语言那样，可以到处存放。<br>同时也解决了项目迁移的问题，只需要带走整个GOPATH 即可。</p><ul><li><p>Golang 应用:<br>构造及其简单，只需要打包成main包，然后其中包含一个main 函数 即可</p></li><li><p>Golang 的模块:<br>Golang 的每一个目录都是一个模块，一个包。就像一个静态类型，所有的成员都像static 。静态变量或者静态方法。<br>但是需要外部调用的方法，首字母必须大写。</p></li><li><p>Gofmt :<br>golang 还提供了一个格式化代码的工具。省去了大家格式化代码的麻烦，专注于代码本身。<br>（解决了tab,空格问题，大括号问题 O(∩_∩)O哈哈哈~)</p></li><li><p>Golang 的import:<br>每次引入都是相对于GOPATH/src ，而不像其他语言可以添加自定义的引入目录。<br>这样就不会出现莫名其妙的引入(鬼知道有些包哪里来的)</p></li><li><p>Go Get 系统:<br>go get 像nodejs 里边的npm 系统。<br>安装一个包的建议命令:<br>go get -v -u # -u 允许更新，-v 显示详细过程</p></li><li><p>Go的Build 和包系统:<br>GOPATH 其他目录介绍:<br>bin 存放编译好的执行文件<br>pkg 放置编译好的类库文件<br>golang 的编译很快。<br>每一个package 都可以编译成一个对应的静态链接库.a文件 </p></li><li><p>Golang 的跨平台系统：<br>你不需要去其他的系统上就可以完成跨平台编译:</p></li><li><p>Goang 语言本身:<br>足够简单的语言，没有的特性:<br>classes<br>Operators overloading<br>Function overloading<br>Optional Parameters<br>exceptions</p></li><li><p>Golang 语言并发特性：<br>作者觉得这不是golang语言的特性.<br>golang 摒弃了线程，使用更简单的goroutine 。<br>goroutine 允许开发者把任务扔给cpu处理而不必担心怎么管理他们.</p></li></ul><p>一个极简单的并发处理代码:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data_scan <span class="keyword">chan</span> <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">data_scan = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">128</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Scan</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">&lt;-data_scan</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Send</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">data_scan &lt;- <span class="string">"hello send message"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">24</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> Scan()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">24</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> Send()</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second * <span class="number">120</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T-（Tip）"><a href="#T-（Tip）" class="headerlink" title="T （Tip）"></a>T （Tip）</h2><p>golang 写一个跨语言调用的so文件:</p><p>编译脚本:<br>go build -buildmode=c-shared -ldflags=”-w -s” -o goso.so<br>其中 -ldflags 中可以包含-X a=b -X c=d 在编译时决定变量的值<br>goso.go 的编写，<br>包含一个空的main函数。<br>其中包含的导出函数，添加 export 注释即可以导出:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"C"</span></span><br><span class="line">    <span class="string">"github.com/v1xingyue/goso/info"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//export BoxHello</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BoxHello</span><span class="params">(message \*C.char)</span> \*<span class="title">C</span>.<span class="title">char</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello Box World !"</span>)</span><br><span class="line">    info.Hello()</span><br><span class="line">    fmt.Println(<span class="string">"this is message "</span>,C.GoString(message))</span><br><span class="line">    <span class="keyword">return</span> C.CString(<span class="string">"this is message from golang !"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>具体可以参看goso的项目: <a href="https://github.com/v1xingyue/goso" target="_blank" rel="noopener">goso</a></p><h2 id="S-Share"><a href="#S-Share" class="headerlink" title="S (Share)"></a>S (Share)</h2><p>分享几个工作中遇到的问题。</p><ul><li><ol><li>centos 双网卡配置，第一个网卡通，第二个网卡上的IP地址不通。</li></ol></li></ul><p>原因是因为,linux 内核的反向路由检测功能。该内核参数为: rp_filter。<br>取值有三种: </p><pre><code>* 0 关闭反向路由检测。* 1 开启严格的路由检测,检测数据包的源地址是否为最佳地址，如果不是直接丢弃* 2 开启简单的路由检测,检测数据包的反向地址是否可达，如果不可达，直接丢弃。</code></pre><p>需要将该值设置为0:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> echo 0 &gt; /proc/sys/net/ipv4/conf/all/rp_filter</span><br><span class="line"><span class="meta">$</span> echo 0 &gt; /proc/sys/net/ipv4/conf/eth0/rp_filter </span><br><span class="line"><span class="meta">$</span> echo 0 &gt; /proc/sys/net/ipv4/conf/eth1/rp_filter</span><br></pre></td></tr></table></figure></p><ul><li>2 使用ipvsadm 搭建一个简单的LVS DR 模式:</li></ul><p>先简单说下DR模式的数据流向, 从外部设备到 Director Server （包含了vip的机器）,<br>ipvsadm 检测到该ip 是一个集群，那么将该数据包转发到 对应的Rip （真实提供服务的机器）。<br>然后，数据直接从Rip 路由到外部设备。</p><p>配置有几个要点:</p><p>单网卡绑定多个虚拟地址,（该地址需保持在同一个网段,且不被其他机器占用）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip addr add 10.212.0.129/24 dev eth1</span><br><span class="line"><span class="meta">#</span>## 删除IP 绑定 使用 ip addr del 10.212.0.129/24 dev eth1</span><br></pre></td></tr></table></figure><p>简单配置ipvsadm 使用DR 模式:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm -C</span><br><span class="line">ipvsadm -A -t 10.212.0.129:80 -s rr</span><br><span class="line">ipvsadm -a -t 10.212.0.129:80 -r 10.212.0.23:80 ## 添加成员</span><br></pre></td></tr></table></figure><p>rip 配置:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VIP=10.212.0.129</span><br><span class="line">ifconfig lo:0 $VIP broadcast $VIP netmask 255.255.255.255 up</span><br><span class="line">route add -host $VIP dev lo:0</span><br></pre></td></tr></table></figure><p>这样就完成了简单的LVS 配置: 访问 <a href="http://10.212.0.129" target="_blank" rel="noopener">http://10.212.0.129</a> 就可以路由到 10.212.0.23 上，并且会带了客户端的源IP.</p><hr><h2 id="还需要arp两个相关的概念"><a href="#还需要arp两个相关的概念" class="headerlink" title="还需要arp两个相关的概念:"></a>还需要arp两个相关的概念:</h2><ul><li>arp_ignore参数：</li></ul><p>设定请求的目标地址为本地ip时，对其arp的查询作不同的应答模式。默认有8个值，我们只使用2个。<br>arp_ignore为0时，表示无论哪块网卡收到arp查询请求，只要本机有此mac地址的网卡，就给予回应。<br>arp_ignore为1时，表示只有请求的mac地址是自己的网卡给予回应。比如一台服务器有两块网卡，其中的一块网卡收arp请求，但是请求的mac是本机的另一块网卡。那么这块网卡就一定不会作出应答。</p><ul><li>arp_announce参数:</li></ul><p>设定了网卡在向外部宣告自己IP-MAC时的级别。有3个值。</p><p>arp_announce为0时，表示无论哪块网卡收到了arp的请求，只要发现本机有请求的mac，就会响应。<br>arp_announce为1时，表示尽量避免响应ARP请求中MAC不是本网卡的。如一个主机有多块网卡，其中一块网卡接收到了ARP请求，发现所请求的MAC是本机另一块网卡的，这个时候接收到ARP请求的这块网卡就尽量避免响应。<br>arp_announce为2时，表示总是使用最合适的网卡来响应。一个主机有多块网卡，其中一块网卡接收到了ARP请求，发现所请求的MAC是本机另一块网卡的，这个时候接收到ARP请求的这块网卡就一定不响应，只有发现请求的MAC是自己的才给与响应。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;arts-2019-03-18-2019-03-24&quot;&gt;&lt;a href=&quot;#arts-2019-03-18-2019-03-24&quot; class=&quot;headerlink&quot; title=&quot;arts 2019-03-18 ~ 2019-03-24&quot;&gt;&lt;/a&gt;arts 2
      
    
    </summary>
    
      <category term="arts" scheme="https://xsec.7ever.cn/categories/arts/"/>
    
    
      <category term="arts" scheme="https://xsec.7ever.cn/tags/arts/"/>
    
  </entry>
  
  <entry>
    <title>centos 双网卡配置有一个网卡不通</title>
    <link href="https://xsec.7ever.cn/2019/03/22/centos-double-card/"/>
    <id>https://xsec.7ever.cn/2019/03/22/centos-double-card/</id>
    <published>2019-03-22T04:32:47.000Z</published>
    <updated>2019-03-22T04:35:00.872Z</updated>
    
    <content type="html"><![CDATA[<p>根本原因:</p><p>Linux默认启用了反向路由检查</p><p>如果2个网卡在一个Lan里面,那么服务器可能从eth0或者eth1发现网关, 如果一个包从eth0进入了, 而网关在eth1上, 那么从eth1是出不去的, 就不通了.  反向路由检查要求从哪里来的才能回哪去.</p><p>关闭反向路由检查(根据自己的情况替换第二第三行的网卡名):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo 0 &gt; /proc/sys/net/ipv4/conf/all/rp_filter</span><br><span class="line">echo 0 &gt; /proc/sys/net/ipv4/conf/eth0/rp_filter</span><br><span class="line">echo 0 &gt; /proc/sys/net/ipv4/conf/eth1/rp_filter</span><br></pre></td></tr></table></figure><p>每次开机自动关闭反向路由检查, 加入 /etc/rc.local 即可.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;根本原因:&lt;/p&gt;
&lt;p&gt;Linux默认启用了反向路由检查&lt;/p&gt;
&lt;p&gt;如果2个网卡在一个Lan里面,那么服务器可能从eth0或者eth1发现网关, 如果一个包从eth0进入了, 而网关在eth1上, 那么从eth1是出不去的, 就不通了.  反向路由检查要求从哪里来的才
      
    
    </summary>
    
      <category term="运维" scheme="https://xsec.7ever.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="centos" scheme="https://xsec.7ever.cn/tags/centos/"/>
    
      <category term="rp_filter" scheme="https://xsec.7ever.cn/tags/rp-filter/"/>
    
  </entry>
  
  <entry>
    <title>python 打开excel</title>
    <link href="https://xsec.7ever.cn/2019/03/15/python-excel/"/>
    <id>https://xsec.7ever.cn/2019/03/15/python-excel/</id>
    <published>2019-03-15T08:41:45.000Z</published>
    <updated>2019-03-18T07:30:07.506Z</updated>
    
    <content type="html"><![CDATA[<hr><p>日常工作生活中，经常用到excel 传递表格。而excel 的处理能力有限，所以催生了如下的脚本。<br>该脚本会自动返回一组迭代器，返回四个值(表格名，行号，列号，内容)。然后自己做进一步处理就好</p><p><em>脚本如下:</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.DEBUG,format=<span class="string">'%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s'</span>,datefmt=<span class="string">'%a, %d %b %Y %H:%M:%S'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xlsLoop</span><span class="params">(xlsName)</span>:</span></span><br><span class="line">wb = xlrd.open_workbook(xlsName)</span><br><span class="line">names = wb.sheet_names()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">sheet = wb.sheet_by_name(name)</span><br><span class="line"><span class="keyword">for</span> rownum <span class="keyword">in</span> range(sheet.nrows):</span><br><span class="line">row = sheet.row_values(rownum)</span><br><span class="line">colnum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> row:</span><br><span class="line"><span class="comment">#logging.debug("&lt;%s&gt; [%d,%d] %s",name,rownum,colnum,col)</span></span><br><span class="line">colnum += <span class="number">1</span> </span><br><span class="line"><span class="keyword">yield</span> (name,rownum,colnum,col)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sheet,rownum,colnum,col <span class="keyword">in</span> xlsLoop(<span class="string">'test.xlsx'</span>):</span><br><span class="line">logging.info(<span class="string">"%s %s %s %s "</span>,sheet,rownum,colnum,col)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;日常工作生活中，经常用到excel 传递表格。而excel 的处理能力有限，所以催生了如下的脚本。&lt;br&gt;该脚本会自动返回一组迭代器，返回四个值(表格名，行号，列号，内容)。然后自己做进一步处理就好&lt;/p&gt;
&lt;p&gt;&lt;em&gt;脚本如下:&lt;/em&gt;&lt;/p&gt;
&lt;figur
      
    
    </summary>
    
      <category term="开发" scheme="https://xsec.7ever.cn/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="python" scheme="https://xsec.7ever.cn/tags/python/"/>
    
      <category term="xlrd" scheme="https://xsec.7ever.cn/tags/xlrd/"/>
    
  </entry>
  
  <entry>
    <title>openssl 生成自定义证书</title>
    <link href="https://xsec.7ever.cn/2019/03/15/openssl-custom/"/>
    <id>https://xsec.7ever.cn/2019/03/15/openssl-custom/</id>
    <published>2019-03-15T05:03:28.000Z</published>
    <updated>2019-03-15T05:04:04.488Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out server.key 1024</span><br><span class="line">openssl req -new -x509 -days 3650 -key server.key -out server.crt -subj "/C=CN/ST=mykey/L=mykey/O=mykey/OU=mykey/CN=domain1/CN=domain2/CN=domain3"</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
      
    
    </summary>
    
      <category term="开发" scheme="https://xsec.7ever.cn/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="openssl" scheme="https://xsec.7ever.cn/tags/openssl/"/>
    
  </entry>
  
  <entry>
    <title>golang 编写测试用例</title>
    <link href="https://xsec.7ever.cn/2019/03/06/golang-test-code/"/>
    <id>https://xsec.7ever.cn/2019/03/06/golang-test-code/</id>
    <published>2019-03-06T02:22:11.000Z</published>
    <updated>2019-03-06T05:54:11.704Z</updated>
    
    <content type="html"><![CDATA[<p>golang 写测试用例，非常简单。如下几步即可:</p><ul><li>普通的包，文件命名必须以 test.go 结尾</li><li>包内必须包含 指定的包，指定的方式定义函数用例:</li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestHello</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>打印日志,通过或者失败:</li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">t.Logf(<span class="string">"Hello Log Message %s "</span>,<span class="string">"&lt;something&gt;"</span>)</span><br><span class="line">t.Errorf(<span class="string">"One Error Happend %s"</span>,<span class="string">"&lt;badthing&gt;"</span>) <span class="comment">// 只要出现Error 那么就认为该测试用例失败</span></span><br></pre></td></tr></table></figure><ul><li>运行测试:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> go test  # 默认只包含测试不通过的用例，但是成功的也回执行,如果想看所有的日志，那么请用 go test -v </span><br><span class="line"></span><br><span class="line">➜  info go test</span><br><span class="line">--- FAIL: TestArraySlice (0.00s)</span><br><span class="line">info_test.go:28: 2 7</span><br><span class="line">info_test.go:29: 3 5</span><br><span class="line">info_test.go:30: End!</span><br><span class="line">FAIL</span><br><span class="line">exit status 1</span><br><span class="line">FAILinfo0.002s</span><br></pre></td></tr></table></figure><p>go test 会执行当前包内定义的所有的以 Test 开头的方法定义</p><ul><li>把go test 编译成一个可执行文件(不执行)</li></ul><p>可以使用这个命令生成可以灵活扩展的多入口程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> go test -c</span><br></pre></td></tr></table></figure><ul><li>如下是一个编写好的简单测试用例文件:<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> info</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSomething</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Log(<span class="string">"Hello test something!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGoAround</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">t.Log(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSlice</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s []<span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">12</span>; i++ &#123;</span><br><span class="line">s = <span class="built_in">append</span>(s, i+<span class="number">3</span>)</span><br><span class="line">t.Log(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestArraySlice</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> items = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line"><span class="keyword">var</span> a = items[<span class="number">3</span>:<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> b = items[<span class="number">5</span>:<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">t.Log(<span class="built_in">len</span>(a), <span class="built_in">cap</span>(a))</span><br><span class="line">t.Log(<span class="built_in">len</span>(b), <span class="built_in">cap</span>(b))</span><br><span class="line">t.Errorf(<span class="string">"End!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;golang 写测试用例，非常简单。如下几步即可:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普通的包，文件命名必须以 test.go 结尾&lt;/li&gt;
&lt;li&gt;包内必须包含 指定的包，指定的方式定义函数用例:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight gola
      
    
    </summary>
    
      <category term="开发" scheme="https://xsec.7ever.cn/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="golang" scheme="https://xsec.7ever.cn/tags/golang/"/>
    
      <category term="test" scheme="https://xsec.7ever.cn/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>使用sphinx 生成python 包的注释文档</title>
    <link href="https://xsec.7ever.cn/2019/03/04/sphinx-python-document/"/>
    <id>https://xsec.7ever.cn/2019/03/04/sphinx-python-document/</id>
    <published>2019-03-04T07:30:11.000Z</published>
    <updated>2019-03-04T07:35:36.725Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装shpinx"><a href="#安装shpinx" class="headerlink" title="安装shpinx"></a>安装shpinx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install sphinx</span></span><br></pre></td></tr></table></figure><h3 id="创建代码目录，或者切换到代码目录-初始化sphinx-配置"><a href="#创建代码目录，或者切换到代码目录-初始化sphinx-配置" class="headerlink" title="创建代码目录，或者切换到代码目录,初始化sphinx 配置"></a>创建代码目录，或者切换到代码目录,初始化sphinx 配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  sphinx-quickstart</span></span><br></pre></td></tr></table></figure><h3 id="修改-source-conf-py"><a href="#修改-source-conf-py" class="headerlink" title="修改 source/conf.py"></a>修改 source/conf.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.insert(<span class="number">0</span>, os.path.abspath(<span class="string">'../'</span>))</span><br></pre></td></tr></table></figure><h3 id="生成rst-文件"><a href="#生成rst-文件" class="headerlink" title="生成rst 文件:"></a>生成rst 文件:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sphinx-apidoc -o  ./source code</span><br></pre></td></tr></table></figure><h3 id="生成Html-文档"><a href="#生成Html-文档" class="headerlink" title="生成Html 文档:"></a>生成Html 文档:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make html</span><br></pre></td></tr></table></figure><p><em>Makefile 修改</em></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Minimal makefile for Sphinx documentation</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can set these variables from the command line.</span></span><br><span class="line">SPHINXOPTS    =</span><br><span class="line">SPHINXBUILD   = sphinx-build</span><br><span class="line">SOURCEDIR     = source</span><br><span class="line">BUILDDIR      = build</span><br><span class="line"></span><br><span class="line"><span class="comment"># Put it first so that "make" without argument is like "make help".</span></span><br><span class="line"><span class="section">help:</span></span><br><span class="line">@<span class="variable">$(SPHINXBUILD)</span> -M help <span class="string">"<span class="variable">$(SOURCEDIR)</span>"</span> <span class="string">"<span class="variable">$(BUILDDIR)</span>"</span> <span class="variable">$(SPHINXOPTS)</span> <span class="variable">$(O)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: help Makefile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Catch-all target: route all unknown targets to Sphinx using the new</span></span><br><span class="line"><span class="comment"># "make mode" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).</span></span><br><span class="line"><span class="section">%: Makefile</span></span><br><span class="line">sphinx-apidoc -o  ./source xsdk</span><br><span class="line">@<span class="variable">$(SPHINXBUILD)</span> -M <span class="variable">$@</span> <span class="string">"<span class="variable">$(SOURCEDIR)</span>"</span> <span class="string">"<span class="variable">$(BUILDDIR)</span>"</span> <span class="variable">$(SPHINXOPTS)</span> <span class="variable">$(O)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装shpinx&quot;&gt;&lt;a href=&quot;#安装shpinx&quot; class=&quot;headerlink&quot; title=&quot;安装shpinx&quot;&gt;&lt;/a&gt;安装shpinx&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="开发" scheme="https://xsec.7ever.cn/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="sphinx" scheme="https://xsec.7ever.cn/tags/sphinx/"/>
    
  </entry>
  
  <entry>
    <title>shell 颜色脚本</title>
    <link href="https://xsec.7ever.cn/2019/02/22/shell-color-script/"/>
    <id>https://xsec.7ever.cn/2019/02/22/shell-color-script/</id>
    <published>2019-02-22T03:10:19.000Z</published>
    <updated>2019-02-22T03:11:32.309Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">if which tput &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">      ncolors=$(tput colors)</span><br><span class="line">  fi</span><br><span class="line">  if [ -t 1 ] &amp;&amp; [ -n "$ncolors" ] &amp;&amp; [ "$ncolors" -ge 8 ]; then</span><br><span class="line">    RED="$(tput setaf 1)"</span><br><span class="line">    GREEN="$(tput setaf 2)"</span><br><span class="line">    YELLOW="$(tput setaf 3)"</span><br><span class="line">    BLUE="$(tput setaf 4)"</span><br><span class="line">    BOLD="$(tput bold)"</span><br><span class="line">    NORMAL="$(tput sgr0)"</span><br><span class="line">  else</span><br><span class="line">    RED=""</span><br><span class="line">    GREEN=""</span><br><span class="line">    YELLOW=""</span><br><span class="line">    BLUE=""</span><br><span class="line">    BOLD=""</span><br><span class="line">    NORMAL=""</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">echo $&#123;RED&#125;Hello This is color World $&#123;NORMAL&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="运维" scheme="https://xsec.7ever.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="shell" scheme="https://xsec.7ever.cn/tags/shell/"/>
    
      <category term="tput" scheme="https://xsec.7ever.cn/tags/tput/"/>
    
  </entry>
  
  <entry>
    <title>osx 终端默认颜色配置</title>
    <link href="https://xsec.7ever.cn/2019/02/19/osx-terminal-color/"/>
    <id>https://xsec.7ever.cn/2019/02/19/osx-terminal-color/</id>
    <published>2019-02-19T02:16:06.000Z</published>
    <updated>2019-02-19T02:18:17.935Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="noopener">tomorrow-theme</a></li><li><a href="https://github.com/altercation/solarized" target="_blank" rel="noopener">solarized</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chriskempson/tomorrow-theme&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tomorrow-theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https:
      
    
    </summary>
    
    
      <category term="osx" scheme="https://xsec.7ever.cn/tags/osx/"/>
    
      <category term="terminal" scheme="https://xsec.7ever.cn/tags/terminal/"/>
    
  </entry>
  
  <entry>
    <title>git 断点clone</title>
    <link href="https://xsec.7ever.cn/2019/02/15/git-clone-disconnect/"/>
    <id>https://xsec.7ever.cn/2019/02/15/git-clone-disconnect/</id>
    <published>2019-02-15T09:30:11.000Z</published>
    <updated>2019-03-14T02:32:24.016Z</updated>
    
    <content type="html"><![CDATA[<h3 id="断点续传下载代码"><a href="#断点续传下载代码" class="headerlink" title="断点续传下载代码:"></a>断点续传下载代码:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir git/dir</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> git/dir </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git fetch https://github.com/docker/distribution.git </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout FETCH_HEAD -b master</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin https://github.com/docker/distribution.git</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;断点续传下载代码&quot;&gt;&lt;a href=&quot;#断点续传下载代码&quot; class=&quot;headerlink&quot; title=&quot;断点续传下载代码:&quot;&gt;&lt;/a&gt;断点续传下载代码:&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
      <category term="开发" scheme="https://xsec.7ever.cn/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="git" scheme="https://xsec.7ever.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>nginx vim 设置语法高亮</title>
    <link href="https://xsec.7ever.cn/2019/01/24/nginx-vim/"/>
    <id>https://xsec.7ever.cn/2019/01/24/nginx-vim/</id>
    <published>2019-01-23T23:21:11.000Z</published>
    <updated>2019-01-23T23:22:42.337Z</updated>
    
    <content type="html"><![CDATA[<h4 id="下载文件语法插件"><a href="#下载文件语法插件" class="headerlink" title="下载文件语法插件:"></a>下载文件语法插件:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/vim/vim74/syntax &amp;&amp; wget -O nginx.vim https://vim.sourceforge.io/scripts/download_script.php?src_id=19394</span><br></pre></td></tr></table></figure><h4 id="设置文件类型："><a href="#设置文件类型：" class="headerlink" title="设置文件类型："></a>设置文件类型：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">vim /usr/share/vim/vim74/filetype.vim </span><br><span class="line">au BufNewFile,BufRead nginx_path    setf nginx</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;下载文件语法插件&quot;&gt;&lt;a href=&quot;#下载文件语法插件&quot; class=&quot;headerlink&quot; title=&quot;下载文件语法插件:&quot;&gt;&lt;/a&gt;下载文件语法插件:&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
    
      <category term="nginx" scheme="https://xsec.7ever.cn/tags/nginx/"/>
    
      <category term="vim" scheme="https://xsec.7ever.cn/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>golang.org 下载失败问题解决</title>
    <link href="https://xsec.7ever.cn/2019/01/23/golang-org-bad/"/>
    <id>https://xsec.7ever.cn/2019/01/23/golang-org-bad/</id>
    <published>2019-01-23T00:27:33.000Z</published>
    <updated>2019-03-19T07:44:55.293Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一步：-从github-com-下载对应的镜像包"><a href="#第一步：-从github-com-下载对应的镜像包" class="headerlink" title="第一步： 从github.com 下载对应的镜像包:"></a>第一步： 从github.com 下载对应的镜像包:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/golang/net.git $GOPATH/src/github.com/golang/net</span><br><span class="line">git clone https://github.com/golang/sys.git $GOPATH/src/github.com/golang/sys</span><br><span class="line">git clone https://github.com/golang/tools.git $GOPATH/src/github.com/golang/tools</span><br><span class="line">git clone https://github.com/golang/crypto.git $GOPATH/src/github.com/golang/crypto</span><br></pre></td></tr></table></figure><h4 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h4><p>将net、sys、tools三个文件夹放到$GOPATH/src/golang.org/x目录下。 或者Linux下可以创建软连接：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s $GOPATH/src/github.com/golang $GOPATH/src/golang.org/x</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;第一步：-从github-com-下载对应的镜像包&quot;&gt;&lt;a href=&quot;#第一步：-从github-com-下载对应的镜像包&quot; class=&quot;headerlink&quot; title=&quot;第一步： 从github.com 下载对应的镜像包:&quot;&gt;&lt;/a&gt;第一步： 从gith
      
    
    </summary>
    
    
      <category term="golang" scheme="https://xsec.7ever.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>修改运行起来的docker 容器的端口参数</title>
    <link href="https://xsec.7ever.cn/2019/01/09/docker-container-port-modify/"/>
    <id>https://xsec.7ever.cn/2019/01/09/docker-container-port-modify/</id>
    <published>2019-01-09T07:00:24.000Z</published>
    <updated>2019-01-09T07:06:06.352Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">起因: 一台带公网IP的docker服务器，同事费了半天劲，折腾出来一个容器,（不可逆，不能重新创建）。端口监听到了0.0.0.0。</span><br><span class="line">改也不是，不改也不是。</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h3><ul><li>先找到对应的容器ID </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>拿到一串字符ID 。去对应的docker 运行目录中，找containers 目录,然后按照前缀找到对应的文件件。</p><p>没错，这个文件件就是运行起来的容器。</p><ul><li>关闭docker 服务， </li></ul><p><em>关闭前做好善后工作，记录好运行了哪些容器，确保你了解那些容器的运行参数</em></p><ul><li><p>修改下配置吧:</p><p>修改这个容器的hostconfig.json文件中的端口（原帖有人提到，如果config.v2.json里面也记录了端口，也要修改）</p></li><li><p>然后重新启动docker 服务</p></li><li><p>最后docker ps -a 看到对应的端口信息改了吧 </p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
      
    
    </summary>
    
      <category term="开发" scheme="https://xsec.7ever.cn/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="docker" scheme="https://xsec.7ever.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>python3 使用click 构建入口程序</title>
    <link href="https://xsec.7ever.cn/2018/12/03/python3-click-samples/"/>
    <id>https://xsec.7ever.cn/2018/12/03/python3-click-samples/</id>
    <published>2018-12-03T08:24:03.000Z</published>
    <updated>2018-12-03T08:27:17.144Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> click</span><br><span class="line"></span><br><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option("-a",default="",help="action you want to do! &lt;syslog,cron&gt;")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 必须包含a 参数，包含click.option 中定义的所有参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_command</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="string">'syslog'</span>:</span><br><span class="line">        print(<span class="string">'start syslog info ....'</span>)</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        print(<span class="string">'./app.py --help'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    do_command()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="click" scheme="https://xsec.7ever.cn/tags/click/"/>
    
      <category term="python3" scheme="https://xsec.7ever.cn/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>多logstash 消费同一个kafka 做队列数据转发</title>
    <link href="https://xsec.7ever.cn/2018/10/25/many-logstash-one-kafka/"/>
    <id>https://xsec.7ever.cn/2018/10/25/many-logstash-one-kafka/</id>
    <published>2018-10-25T05:02:20.000Z</published>
    <updated>2018-10-25T05:05:33.849Z</updated>
    
    <content type="html"><![CDATA[<p>logstash-2.4.0 </p><h3 id="修改如下的代码"><a href="#修改如下的代码" class="headerlink" title="修改如下的代码:"></a>修改如下的代码:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vendor/bundle/jruby/1.9/gems/jruby-kafka-1.5.0-java/lib/jruby-kafka/group.rb</span><br><span class="line"></span><br><span class="line">run 部分的代码:  大约163行</span><br><span class="line">if @reset_beginning == &apos;from-beginning&apos;</span><br><span class="line">    #Java::kafka::utils::ZkUtils.maybeDeletePath(@zk_connect, &quot;/consumers/#&#123;@group_id&#125;&quot;)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="批量创建配置文件的脚本"><a href="#批量创建配置文件的脚本" class="headerlink" title="批量创建配置文件的脚本:"></a>批量创建配置文件的脚本:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">rm -f conf/*</span><br><span class="line">num=10</span><br><span class="line"></span><br><span class="line">for((in=0;in&lt;$num;in++))</span><br><span class="line">do</span><br><span class="line">    cat hflow.conf  | sed &quot;s/&lt;data_num&gt;/$&#123;in&#125;/g&quot; &gt; conf/hflow_$&#123;in&#125;.conf</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="hflow-conf-的模板"><a href="#hflow-conf-的模板" class="headerlink" title="hflow.conf 的模板:"></a>hflow.conf 的模板:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    kafka &#123;</span><br><span class="line">        zk_connect =&gt; &quot;zk.your.own.com:2181/kafka/k1001&quot;</span><br><span class="line">        topic_id =&gt; &quot;&quot;</span><br><span class="line">        group_id =&gt; &quot;&quot;</span><br><span class="line">        reset_beginning =&gt; true</span><br><span class="line">        consumer_threads =&gt; 1</span><br><span class="line">        decorate_events =&gt; false </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">output &#123;</span><br><span class="line"></span><br><span class="line">    file&#123;</span><br><span class="line">        path =&gt; &quot;/data0/logstash/logstash-2.4.0/data/hflow_%&#123;+YYYY-MM-dd&#125;_&lt;data_num&gt;.log&quot;    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    file&#123;</span><br><span class="line">        path =&gt; &quot;/data0/logstash/logstash-2.4.0/data/all_%&#123;+YYYY-MM-dd&#125;.log&quot;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="supervisor-配置"><a href="#supervisor-配置" class="headerlink" title="supervisor 配置:"></a>supervisor 配置:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[program:starflow]</span><br><span class="line">process_name=%(program_name)s_%(process_num)01d;</span><br><span class="line">numprocs=10</span><br><span class="line">command=/data0/logstash/logstash-2.4.0/bin/logstash -f /data0/logstash/logstash-2.4.0/conf/hflow_%(process_num)01d.conf</span><br><span class="line">directory=/data0/logstash/logstash-2.4.0</span><br><span class="line">autostart=true</span><br><span class="line">startsecs=1</span><br><span class="line">startretries=5</span><br><span class="line">user=root</span><br><span class="line">redirect_stderr=true</span><br><span class="line">stdout_logfile=/data0/logstash/logstash-2.4.0/logs/stdout.log</span><br><span class="line">stdout_logfile_maxbytes=1024MB</span><br><span class="line">stdout_logfile_backups=10</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;logstash-2.4.0 &lt;/p&gt;
&lt;h3 id=&quot;修改如下的代码&quot;&gt;&lt;a href=&quot;#修改如下的代码&quot; class=&quot;headerlink&quot; title=&quot;修改如下的代码:&quot;&gt;&lt;/a&gt;修改如下的代码:&lt;/h3&gt;&lt;figure class=&quot;highlight pla
      
    
    </summary>
    
    
      <category term="kafka" scheme="https://xsec.7ever.cn/tags/kafka/"/>
    
      <category term="logstash" scheme="https://xsec.7ever.cn/tags/logstash/"/>
    
  </entry>
  
  <entry>
    <title>lsattr chattr</title>
    <link href="https://xsec.7ever.cn/2018/10/17/lsattr-to-file/"/>
    <id>https://xsec.7ever.cn/2018/10/17/lsattr-to-file/</id>
    <published>2018-10-17T06:19:06.000Z</published>
    <updated>2018-10-17T06:21:43.348Z</updated>
    
    <content type="html"><![CDATA[<p>Linux的chattr命令， chattr命令用于改变文件属性。这项指令可改变存放在ext2文件系统上的文件或目录属性，这些属性共有以下8种模式：</p><ul><li>a：让文件或目录仅供附加用途。</li><li>b：不更新文件或目录的最后存取时间。</li><li>c：将文件或目录压缩后存放。</li><li>d：将文件或目录排除在倾倒操作之外。</li><li>i：不得任意更动文件或目录。</li><li>s：保密性删除文件或目录。</li><li>S：即时更新文件或目录。</li><li>u：预防以外删除。</li></ul><p>lsattr -a 可以查看对应的属性</p><p>对于特殊属性的操作<br>chattr +i name<br>chattr -i name</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux的chattr命令， chattr命令用于改变文件属性。这项指令可改变存放在ext2文件系统上的文件或目录属性，这些属性共有以下8种模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a：让文件或目录仅供附加用途。&lt;/li&gt;
&lt;li&gt;b：不更新文件或目录的最后存取时间。&lt;/li&gt;

      
    
    </summary>
    
      <category term="linux" scheme="https://xsec.7ever.cn/categories/linux/"/>
    
    
      <category term="linux" scheme="https://xsec.7ever.cn/tags/linux/"/>
    
      <category term="lsattr" scheme="https://xsec.7ever.cn/tags/lsattr/"/>
    
      <category term="chattr" scheme="https://xsec.7ever.cn/tags/chattr/"/>
    
  </entry>
  
  <entry>
    <title>osx关闭开启spotlight 服务</title>
    <link href="https://xsec.7ever.cn/2018/08/01/osx-close-open-spotlight/"/>
    <id>https://xsec.7ever.cn/2018/08/01/osx-close-open-spotlight/</id>
    <published>2018-07-31T17:36:40.000Z</published>
    <updated>2018-07-31T17:38:03.682Z</updated>
    
    <content type="html"><![CDATA[<p>必要的时候，需要关闭spotlight 服务，节省系统资源.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mdutil -a -i off</span><br></pre></td></tr></table></figure><p>重新开启服务:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mdutil -a -i on</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;必要的时候，需要关闭spotlight 服务，节省系统资源.&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pr
      
    
    </summary>
    
    
      <category term="osx" scheme="https://xsec.7ever.cn/tags/osx/"/>
    
      <category term="spotlight" scheme="https://xsec.7ever.cn/tags/spotlight/"/>
    
  </entry>
  
</feed>
